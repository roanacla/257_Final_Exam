# -*- coding: utf-8 -*-
"""BERT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XINH0UOkFtM8jEBJzCCmTaRtDSVZH7Nt
"""

import transformers
from transformers import BertModel, BertTokenizer
import torch
import torch.nn as nn

class CerealKillers_SentimentClassifier(nn.Module):
  def __init__(self):
    super(CerealKillers_SentimentClassifier, self).__init__()
    self.tokenizer = BertTokenizer.from_pretrained('/content/CerealKillers/BERT/saved_model/')
    self.bert = BertModel.from_pretrained('/content/CerealKillers/BERT/saved_model/')
    self.class_names = ['true','pants-fire']
    self.n_classes = len(self.class_names)
    self.drop = nn.Dropout(p=0.3)
    self.out = nn.Linear(self.bert.config.hidden_size, self.n_classes)

  def forward(self, input_ids, attention_mask):
    _, pooled_output = self.bert(
      input_ids=input_ids,
      attention_mask=attention_mask
    )
    output = self.drop(pooled_output)
    return self.out(output)

  def predict(self, review_text):
    encoded_review = self.tokenizer.encode_plus(
      review_text,
      max_length=512,
      add_special_tokens=True,
      return_token_type_ids=False,
      pad_to_max_length=True,
      return_attention_mask=True,
      return_tensors='pt',
    )
    input_ids = encoded_review['input_ids']
    attention_mask = encoded_review['attention_mask']
    output = self.forward(input_ids, attention_mask)
    _, prediction = torch.max(output,1)
    bert_score = 0
    if prediction.item() == 0:
      bert_score = 1
    elif prediction.item() == 1:
      bert_score = 2
    elif prediction.item() == 2:
      bert_score = 3
    elif prediction.item() == 3:
      bert_score = 4
    elif prediction.item() == 4:
      bert_score = 5
    else:
      bert_score = 6
    return bert_score
